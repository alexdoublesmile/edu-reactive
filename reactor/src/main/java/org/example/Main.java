package org.example;

public class Main {
    public static void main(String[] args) throws InterruptedException {
        //////////////  Mono & Flux fabrics ///////////////////////////////
//        Mono.empty();
//        Mono.never();
//        Mono.error();
//        Mono.just();
//
//        Mono.create();
//        Mono.from();
//        Mono.defer();
//        Mono.deferContextual();
//        Mono.first();
//        Mono.firstWithSignal();
//        Mono.firstWithValue();
//        Mono.using();
//        Mono.usingWhen();
//        Mono.zip();
        //////////////  Mono only ///////////////////////////////
//        Mono.justOrEmpty();

//        Mono.delay();
//        Mono.fromCallable();
//        Mono.fromCompletionStage();
//        Mono.fromDirect();
//        Mono.fromFuture();
//        Mono.fromRunnable();
//        Mono.fromSupplier();
//        Mono.ignoreElements();
//        Mono.sequenceEqual();
//        Mono.when();
//        Mono.whenDelayError();
//        Mono.zipDelayError();
        //////////////  Flux only ///////////////////////////////
//        Flux.range(3,5).subscribe(System.out::println);
//        Flux.interval(Duration.ofMillis(500)).subscribe(System.out::println);
//        Flux.fromIterable();
//        Flux.fromStream();
//        Flux.fromArray();

//        Flux.generate();
//        Thread.sleep(5000);

//        Flux.push();
//        Flux.combineLatest();
//        Flux.concat();
//        Flux.concatDelayError();
//        Flux.switchOnNext();
//        Flux.merge();
//        Flux.mergeComparing();
//        Flux.mergeComparingDelayError();
//        Flux.mergeDelayError();
//        Flux.mergeOrdered();
//        Flux.mergePriority();
//        Flux.mergePriorityDelayError();
//        Flux.mergeSequential();
//        Flux.mergeSequentialDelayError();

//  --------------------------------------------

//        samPublisher.log();
//        samPublisher.map();
//        samPublisher.doOnSubscribe();
//        samPublisher.doOnRequest();
//        samPublisher.doOnEach();
//        samPublisher.doOnSuccess();
//        samPublisher.doOnNext();
//        samPublisher.doOnError();
//        samPublisher.doOnDiscard();
//        samPublisher.doOnCancel();
//        samPublisher.doOnTerminate();
//        samPublisher.onErrorReturn();
//        samPublisher.onErrorResume();
//        samPublisher.onErrorContinue();
//        samPublisher.onErrorMap();
//        samPublisher.onErrorComplete();
//        samPublisher.onErrorStop();

//        samPublisher.hasElement();
//        samPublisher.toFuture();
//        samPublisher.and();
//        samPublisher.as();
//        samPublisher.block();
//        samPublisher.blockOptional();
//        samPublisher.cache();
//        samPublisher.cacheInvalidateIf();
//        samPublisher.cacheInvalidateWhen();
//        samPublisher.cancelOn();
//        samPublisher.cast();
//        samPublisher.checkpoint();
//        samPublisher.concatWith();
//        samPublisher.contextCapture();
//        samPublisher.contextWrite();
//        samPublisher.defaultIfEmpty();
//        samPublisher.delayElement();
//        samPublisher.delaySubscription();
//        samPublisher.delayUntil();
//        samPublisher.dematerialize();
//        samPublisher.doAfterTerminate();
//        samPublisher.doFinally();
//        samPublisher.doFirst();
//        samPublisher.elapsed();
//        samPublisher.expand();
//        samPublisher.expandDeep();
//        samPublisher.filter();
//        samPublisher.filterWhen();
//        samPublisher.flatMap();
//        samPublisher.flatMapIterable();
//        samPublisher.flatMapMany();
//        samPublisher.flux();
//        samPublisher.handle();
//        samPublisher.hide();
//        samPublisher.ignoreElement();
//        samPublisher.mapNotNull();
//        samPublisher.materialize();
//        samPublisher.mergeWith();
//        samPublisher.metrics();
//        samPublisher.name();
//        samPublisher.ofType();
//        samPublisher.onTerminateDetach();
//        samPublisher.or();
//        samPublisher.publish();
//        samPublisher.publishOn();
//        samPublisher.repeat();
//        samPublisher.repeatWhen();
//        samPublisher.repeatWhenEmpty();
//        samPublisher.retry();
//        samPublisher.retryWhen();
//        samPublisher.share();
//        samPublisher.single();
//        samPublisher.singleOptional();
//        samPublisher.subscribeOn();
//        samPublisher.subscribeWith();
//        samPublisher.switchIfEmpty();
//        samPublisher.tag();
//        samPublisher.take();
//        samPublisher.takeUntilOther();
//        samPublisher.tap();
//        samPublisher.then();
//        samPublisher.thenEmpty();
//        samPublisher.thenMany();
//        samPublisher.thenReturn();
//        samPublisher.timed();
//        samPublisher.timeout();
//        samPublisher.timestamp();
//        samPublisher.transform();
//        samPublisher.transformDeferred();
//        samPublisher.transformDeferredContextual();
//        samPublisher.zipWhen();
//        samPublisher.zipWith();
//
//        stringPublisher.hasElements();
//        stringPublisher.getPrefetch();
//        stringPublisher.toIterable();
//        stringPublisher.toStream();
//        stringPublisher.all();
//        stringPublisher.any();
//        stringPublisher.blockFirst();
//        stringPublisher.blockLast();
//        stringPublisher.buffer();
//        stringPublisher.bufferTimeout();
//        stringPublisher.bufferUntil();
//        stringPublisher.bufferUntilChanged();
//        stringPublisher.bufferWhen();
//        stringPublisher.bufferWhile();
//        stringPublisher.collect();
//        stringPublisher.collectList();
//        stringPublisher.collectMap();
//        stringPublisher.collectMultimap();
//        stringPublisher.collectSortedList();
//        stringPublisher.concatMap();
//        stringPublisher.concatMapDelayError();
//        stringPublisher.concatMapIterable();
//        stringPublisher.concatWithValues();
//        stringPublisher.count();
//        stringPublisher.delayElements();
//        stringPublisher.delaySequence();
//        stringPublisher.distinct();
//        stringPublisher.distinctUntilChanged();
//        stringPublisher.doOnComplete();
//        stringPublisher.elementAt();
//        stringPublisher.flatMapDelayError();
//        stringPublisher.flatMapSequential();
//        stringPublisher.flatMapSequentialDelayError();
//        stringPublisher.groupBy();
//        stringPublisher.groupJoin();
//        stringPublisher.ignoreElements();
//        stringPublisher.index();
//        stringPublisher.join();
//        stringPublisher.last();
//        stringPublisher.limitRate();
//        stringPublisher.limitRequest();
//        stringPublisher.mergeComparingWith();
//        stringPublisher.mergeOrderedWith();
//        stringPublisher.next();
//        stringPublisher.onBackpressureBuffer();
//        stringPublisher.onBackpressureDrop();
//        stringPublisher.onBackpressureError();
//        stringPublisher.onBackpressureLatest();
//        stringPublisher.onErrorMap();
//        stringPublisher.parallel();
//        stringPublisher.publishNext();
//        stringPublisher.reduce();
//        stringPublisher.reduceWith();
//        stringPublisher.replay();
//        stringPublisher.sample();
//        stringPublisher.sampleFirst();
//        stringPublisher.sampleTimeout();
//        stringPublisher.scan();
//        stringPublisher.scanWith();
//        stringPublisher.shareNext();
//        stringPublisher.singleOrEmpty();
//        stringPublisher.skip();
//        stringPublisher.skipLast();
//        stringPublisher.skipUntil();
//        stringPublisher.skipUntilOther();
//        stringPublisher.skipWhile();
//        stringPublisher.sort();
//        stringPublisher.startWith();
//        stringPublisher.switchMap();
//        stringPublisher.switchOnFirst();
//        stringPublisher.takeLast();
//        stringPublisher.takeUntil();
//        stringPublisher.takeWhile();
//        stringPublisher.window();
//        stringPublisher.windowTimeout();
//        stringPublisher.windowUntil();
//        stringPublisher.windowUntilChanged();
//        stringPublisher.windowWhen();
//        stringPublisher.windowWhile();
//        stringPublisher.withLatestFrom();
//        stringPublisher.zipWithIterable();
    }
}